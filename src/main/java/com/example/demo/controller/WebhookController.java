package com.example.demo.controller;

import com.example.demo.Entity.Bill;
import com.example.demo.dto.SePayWebhookRequest;
import com.example.demo.repository.BillRepository;
import com.example.demo.service.BillService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.Optional;

@RestController
@RequestMapping("/api/webhooks")
@RequiredArgsConstructor
public class WebhookController {

    private final BillRepository billRepository;
    private final BillService billService;

@PostMapping("/sepay-payment")
public ResponseEntity<String> handleWebhook(@RequestBody SePayWebhookRequest request) {
    System.out.println("===== üì© Webhook SePay =====");
    System.out.println("üìÑ Description: " + request.getDescription());
    System.out.println("üí∞ Amount: " + request.getAmount());
    System.out.println("‚úÖ Status: " + request.getStatus());

    String billCode = extractBillCode(request.getDescription());

    if (billCode == null) {
        return ResponseEntity.badRequest().body("‚ùå Kh√¥ng t√¨m th·∫•y m√£ h√≥a ƒë∆°n trong m√¥ t·∫£");
    }

    Optional<Bill> optionalBill = billRepository.findByCode(billCode);
    if (optionalBill.isEmpty()) {
        return ResponseEntity.badRequest().body("‚ùå Kh√¥ng t√¨m th·∫•y h√≥a ƒë∆°n v·ªõi m√£: " + billCode);
    }

    Bill bill = optionalBill.get();
    String oldStatus = bill.getStatus();
    String newStatus = request.getStatus().toUpperCase();

    bill.setStatus(newStatus);
    billRepository.save(bill);

    // ‚úÖ TH√äM: Tr·ª´ s·ªë l∆∞·ª£ng v√† discount usage khi thanh to√°n th√†nh c√¥ng
    if ("PENDING".equals(oldStatus) && "CONFIRMED".equals(newStatus)) {
        try {
            billService.deductInventoryForBill(bill);
            billService.deductDiscountUsage(bill); // ‚úÖ Tr·ª´ l∆∞·ª£t s·ª≠ d·ª•ng m√£ gi·∫£m gi√°
        } catch (RuntimeException e) {
            // N·∫øu kh√¥ng ƒë·ªß h√†ng, ƒë·ªïi status v·ªÅ PENDING v√† th√¥ng b√°o l·ªói
            bill.setStatus("PENDING");
            billRepository.save(bill);
            return ResponseEntity.badRequest().body("‚ùå " + e.getMessage());
        }
    }

    return ResponseEntity.ok("‚úÖ ƒê√£ c·∫≠p nh·∫≠t h√≥a ƒë∆°n " + billCode + " th√†nh " + newStatus);
}

private String extractBillCode(String description) {
    if (description == null) return null;
    description = description.trim().toUpperCase();

    // D√πng regex ƒë·ªÉ t√¨m m√£ b·∫Øt ƒë·∫ßu b·∫±ng HD + s·ªë
    Pattern pattern = Pattern.compile("(HD\\d+)");
    Matcher matcher = pattern.matcher(description);

    if (matcher.find()) {
        return matcher.group(1);
    }
    return null;
}

}
